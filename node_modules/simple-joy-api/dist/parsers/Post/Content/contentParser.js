"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ContentElement_1 = __importDefault(require("../../../models/Post/Content/ContentElement"));
class ContentParser {
    parse(elements) {
        const contentElements = [];
        elements.map((el) => {
            const object = new ContentElement_1.default();
            // is media (gif, iframe, image)
            if (el.attribs && el.attribs.class === 'image') {
                ContentParser.parseMediaContent(el, object);
                // is link
            }
            else if (el.name === 'a' && el.attribs.href) {
                ContentParser.parseLinkContent(el, object);
                // another - tags, we trying to get structure
            }
            else {
                ContentParser.parseOtherContent(el, object);
                // recursive parse in tag
                if (el.children) {
                    object.childrens = this.parse(el.children);
                }
            }
            contentElements.push(object);
        });
        return contentElements;
    }
    static parseMediaContent(el, object) {
        const children = el.children[0];
        if (children.name === 'img') {
            object.type = ContentElement_1.default.IMAGE_TYPE;
            object.data = children.attribs.src;
        }
        if (children.name === 'a') {
            object.type = ContentElement_1.default.IMAGE_TYPE;
            object.data = children.children[0] ? children.children[0].attribs.src : null;
        }
        if (children.name === 'span') {
            object.type = ContentElement_1.default.VIDEO_TYPE;
            object.data = children.children[0] ? children.children[0].attribs.href : null;
        }
        if (children.name === 'iframe') {
            object.type = ContentElement_1.default.IFRAME_TYPE;
            object.data = children.attribs.src;
        }
        return object;
    }
    static parseLinkContent(el, object) {
        object.type = ContentElement_1.default.LINK_TYPE;
        object.data = el.children[0] ? String(el.children[0].data) : null;
        object.link = el.attribs.href;
        return object;
    }
    static parseOtherContent(el, object) {
        object.type = ContentElement_1.default.OTHER_TYPE;
        object.data = el.data ? el.data : null;
        object.tag = el.name ? el.name : el.type;
        return object;
    }
}
exports.default = new ContentParser();
