"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const User_1 = __importDefault(require("../../models/User"));
const Post_1 = __importDefault(require("../../models/Post"));
const cheerio_1 = __importDefault(require("cheerio"));
const Content_1 = __importDefault(require("../../models/Post/Content"));
const contentParser_1 = __importDefault(require("./Content/contentParser"));
class PostParser {
    parsePost(html) {
        const post = new Post_1.default();
        const $post = cheerio_1.default.load(html);
        post.id = PostParser.parseId(html);
        post.tags = PostParser.parsePostTags($post);
        post.author = PostParser.parsePostAuthor($post);
        post.date = PostParser.parsePostDate($post);
        post.rating = PostParser.parsePostRating($post);
        post.commentsCount = PostParser.parseCommentsCount($post);
        post.content = PostParser.parseContent($post);
        return post;
    }
    static parseContent($post) {
        const content = new Content_1.default();
        const elements = $post('.post_content')[0].children;
        content.elements = contentParser_1.default.parse(elements);
        return content;
    }
    static parseCommentsCount($post) {
        const text = $post('.commentnum')[0].children[0];
        const match = text.data ? text.data.match(/\s(\d*)/) : null;
        return match ? Number(match[1]) : null;
    }
    static parsePostRating($post) {
        const el = $post('.post_rating > span')[0].children[0];
        return el.data ? Number(el.data) : null;
    }
    static parsePostDate($post) {
        const el = $post('.non-localized-time')[0];
        return el ? Number(el.attribs['data-time']) : null;
    }
    static parsePostAuthor($post) {
        const user = new User_1.default();
        const link = $post('.uhead_nick > img')[0];
        const nickname = link.attribs.alt;
        const id = link.attribs.src.match(/\/(\d+)/);
        user.id = id ? Number(id[1]) : null;
        user.nickname = nickname;
        return user;
    }
    static parsePostTags($post) {
        const tags = [];
        const elements = $post('.taglist > b > a');
        elements.map((i, el) => {
            const tag = el.attribs.title;
            tags.push(tag);
        });
        return tags;
    }
    static parseId($post) {
        const containerName = $post.attribs.id;
        const match = containerName.match(/\d+/);
        return match ? Number(match[0]) : null;
    }
}
exports.default = new PostParser();
